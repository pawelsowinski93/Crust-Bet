{"version":3,"sources":["reducer/initialState.ts","components/helpers/bettingHelpers.ts","components/Dashboard.tsx","components/Navbar.tsx","components/StepperInfo.tsx","components/BetAction.tsx","components/GameSelect.tsx","components/Header.tsx","components/ParticipantsTyping.tsx","components/CompleteBet.tsx","components/ConfirmPopover.tsx","components/BetsList.tsx","reducer/reducer.ts","App.tsx","index.tsx"],"names":["betsData","localStorage","getItem","initialState","games","participants","bets","JSON","parse","filterParticipantsForSelectedGame","selectedGame","participantsForGame","filter","id","map","length","includes","prepareGameTitle","console","log","name","preparePlaces","list","gameName","result","push","raceName","first","body","second","third","useStyles","makeStyles","theme","container","flexDirection","justifyContent","alignItems","padding","spacing","position","root","display","flexWrap","margin","width","height","borderRadius","getStorageValue","variable","data","Dashboard","propsClasses","classes","dispatch","useState","activeStep","setAcviveStep","setSelectedGame","betList","setBetList","isBetActionOpen","setIsBetActionOpen","isOrderSet","setIsOrderSet","isConfirmationOpen","setIsConfirmationOpen","React","useEffect","setItem","stringify","maxSnack","className","Paper","elevation","setIsOpen","open","background","companyInfoWrapper","logo","marginRight","Navbar","setIsDrawerOpen","src","alt","IconButton","onClick","color","Badge","badgeContent","PlaylistAddCheck","top","backdropFilter","backButton","instructions","marginTop","marginBottom","stepper","label","fontSize","fontWeight","StepperInfo","classesProps","Stepper","alternativeLabel","Step","StepLabel","left","BetAction","Button","variant","backgroundColor","palette","paper","textAlign","gamesWrapper","GameSelect","array","filterActive","setFilterActive","title","subtitle","moment","format","FormControlLabel","control","Checkbox","checked","onChange","Divider","List","component","active","ListItem","button","ListItemText","primary","ListItemIcon","RadioButtonChecked","textTransform","borderTopLeftRadius","borderTopRightRadius","header","avatar","Header","Card","CardHeader","content","DirectionsCar","subheader","icon","infoWrapper","minWidth","orderSet","zIndex","checkIcon","ParticipantsTyping","Info","onDragEnd","orderedList","startIndex","endIndex","Array","from","splice","removed","reorderList","source","index","destination","droppableId","provided","snapShot","ref","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","CheckCircle","betInfo","CompleteBet","AttachMoney","CardContent","Typography","gutterBottom","ArrowBackIos","ConfirmationPopover","enqueueSnackbar","useSnackbar","handleClose","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","type","payload","autoFocus","wrapper","marginLeft","BetsList","reducer","state","action","App","useReducer","isDrawerOpen","fetch","then","res","json","catch","error","message","SwipeableDrawer","anchor","onOpen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f8ca6e4.chunk.js","sourcesContent":["import { IBetList } from \"../components/Dashboard\";\r\n\r\ninterface AppInitialState {\r\n\tgames: IGame[];\r\n\tparticipants: IParticipants[];\r\n\tbets: IBetList[]\r\n}\r\n\r\nexport interface IParticipants {\r\n    body: string;\r\n    id: number\r\n}\r\n\r\nexport interface IBets {\r\n    game: string;\r\n    places: IPlaces[];\r\n    date: string\r\n}\r\n\r\ninterface IPlaces {\r\n    first: string;\r\n    second: string;\r\n    third: string\r\n}\r\n\r\nexport interface IGame {\r\n    active: boolean;\r\n    id: number;\r\n    name: string;\r\n    participants: number[]\r\n}\r\n\r\nconst betsData = localStorage.getItem(\"bets\")\r\n\r\nexport const initialState: AppInitialState = {\r\n\tgames: [],\r\n\tparticipants: [],\r\n\tbets: betsData ? JSON.parse(betsData) : []\r\n};\r\n","import { IGame, IParticipants } from \"../../reducer/initialState\"\r\nimport { IBetList } from \"../Dashboard\";\r\n\r\nexport const filterActiveGames = (array: IGame[]): IGame[] => (\r\n    array.filter(({ active }) => active)\r\n);\r\n\r\nexport const filterParticipantsForSelectedGame = (\r\n    games: IGame[],\r\n    participants: IParticipants[],\r\n    selectedGame: number\r\n): IParticipants[] => {\r\n    const participantsForGame = games\r\n        .filter(({ id }) => id === selectedGame)\r\n        .map(({ participants }) => participants)        \r\n        \r\n    return participantsForGame.length > 0\r\n        ? participants.filter(({ id }) => participantsForGame[0].includes(id))\r\n        : []\r\n};\r\n\r\nexport const prepareGameTitle = (games: IGame[], selectedGame?: number): string => {\r\n    console.log(games);\r\n    \r\n    return (\r\n    selectedGame && games.length\r\n        ? games.filter(({ id }) => selectedGame === id)[0].name\r\n        : \"\"\r\n)}\r\n\r\nexport const reorderList = (list: IParticipants[], startIndex: number, endIndex: number | undefined): IParticipants[] => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1)\r\n    endIndex && result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n}\r\n\r\nexport const preparePlaces = (list: IParticipants[], gameName: string): IBetList[] | [] => {\r\n    if (list.length > 2) {\r\n        const result = [];\r\n        result.push({\r\n            raceName: gameName,\r\n            first: list[0].body,\r\n            second: list[1].body,\r\n            third: list[2].body,\r\n        })\r\n        return result\r\n    }\r\n    return []\r\n}","import React, { useState, Dispatch } from \"react\";\r\nimport { AppActions } from \"../reducer/reducer\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { ConfirmationPopover, CompleteBet, StepperInfo, BetAction, GameSelect, ParticipantsTyping } from \"./index\"\r\nimport { filterParticipantsForSelectedGame } from \"./helpers/bettingHelpers\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { IGame, IParticipants } from \"../reducer/initialState\";\r\nimport { SnackbarProvider } from \"notistack\";\r\n\r\ninterface INavigationProps {\r\n\tclasses?: Partial<string>;\r\n\tdispatch: Dispatch<AppActions>;\r\n\tparticipants: IParticipants[];\r\n\tgames: IGame[];\r\n    bets: IBetList[];\r\n}\r\n\r\nexport interface IBetList {\r\n    raceName: string;\r\n    first: string;\r\n    second: string;\r\n    third: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\tcontainer: {\r\n        flexDirection: \"column\",\r\n        justifyContent: \"flex-start\",\r\n        alignItems: \"center\",\r\n\t\tpadding: theme.spacing(10),\r\n        position: \"relative\"\r\n\t},\r\n\troot: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexWrap: \"wrap\",\r\n        justifyContent: \"center\",\r\n\t\t\"& > *\": {\r\n\t\t\tmargin: theme.spacing(6),\r\n\t\t\twidth: theme.spacing(70),\r\n\t\t\theight: theme.spacing(90),\r\n            borderRadius: \"10px\"\r\n\t\t}\r\n\t}\r\n}));\r\n\r\nconst getStorageValue = (variable: string): any => {\r\n    const data = localStorage.getItem(variable)\r\n    if (data) {\r\n        return JSON.parse(data)\r\n    }\r\n    return null\r\n}\r\n\r\nconst Dashboard: React.FC<INavigationProps> = ({\r\n\tclasses: propsClasses,\r\n    participants,\r\n    dispatch,\r\n    bets,\r\n\tgames,\r\n}) => {\r\n\tconst [activeStep, setAcviveStep] = useState<number>(getStorageValue(\"active-step\") || 0);\r\n    const [selectedGame, setSelectedGame] = useState<number | null>(getStorageValue(\"selected-game\") || null)\r\n    const [betList, setBetList] = useState<IBetList[]>(getStorageValue(\"bet-list\") || []);\r\n    const [isBetActionOpen ,setIsBetActionOpen] = useState<boolean>(getStorageValue(\"is-bet-action-open\") || false);\r\n    const [isOrderSet, setIsOrderSet] = useState<boolean>(getStorageValue(\"is-order-set\") || false);\r\n    const [isConfirmationOpen, setIsConfirmationOpen] = useState<boolean>(getStorageValue(\"is-confirmation-open\") || false);\r\n\r\n\tconst classes = useStyles({ classes: propsClasses });\r\n\r\n    React.useEffect(() => {\r\n        localStorage.setItem(\"active-step\", JSON.stringify(activeStep))\r\n        localStorage.setItem(\"selected-game\", JSON.stringify(selectedGame))\r\n        localStorage.setItem(\"bet-list\", JSON.stringify(betList))\r\n        localStorage.setItem(\"is-bet-action-open\", JSON.stringify(isBetActionOpen))\r\n        localStorage.setItem(\"is-order-set\", JSON.stringify(isOrderSet))\r\n        localStorage.setItem(\"is-confirmation-open\", JSON.stringify(isConfirmationOpen))\r\n    }, [activeStep, selectedGame, betList, isBetActionOpen, isOrderSet, isConfirmationOpen])\r\n\r\n    React.useEffect(() => {\r\n        localStorage.setItem(\"bets\", JSON.stringify(bets))\r\n    }, [bets])\r\n\r\n    React.useEffect(() => {\r\n        setAcviveStep(selectedGame ? 1 : 0);\r\n    }, [selectedGame])    \r\n\r\n\treturn (\r\n        <SnackbarProvider maxSnack={1}>\r\n            <div className={classes.container}>\r\n                <StepperInfo {...{ activeStep }} />\r\n                <div className={classes.root}>\r\n                    <Paper elevation={4} >\r\n                        {!isBetActionOpen && <GameSelect {...{\r\n                            games,\r\n                            selectedGame,\r\n                            setBetList,\r\n                            setIsOrderSet,\r\n                            setSelectedGame\r\n                        }} />}\r\n                    </Paper>\r\n                    <Paper elevation={4}>\r\n                        {selectedGame && <ParticipantsTyping\r\n                            participants={filterParticipantsForSelectedGame(games, participants, selectedGame)}\r\n                            {...{\r\n                                games,\r\n                                setIsOrderSet,\r\n                                setAcviveStep,\r\n                                setBetList,\r\n                                betList,\r\n                                dispatch,\r\n                                isOrderSet,\r\n                                selectedGame\r\n                            }}\r\n                        />}\r\n                    </Paper>\r\n                    <Paper elevation={4}>\r\n                        {activeStep === 2 && <CompleteBet {...{\r\n                            setAcviveStep,\r\n                            setIsConfirmationOpen,\r\n                            setIsOrderSet,\r\n                            betList\r\n                        }} />}\r\n                    </Paper>\r\n                </div>\r\n                {isBetActionOpen && <BetAction {...{ setIsBetActionOpen, bets }} />}\r\n                {isConfirmationOpen && <ConfirmationPopover\r\n                    setIsOpen={setIsConfirmationOpen}\r\n                    open={isConfirmationOpen}    \r\n                    {...{\r\n                        betList,\r\n                        dispatch,\r\n                        setSelectedGame,\r\n                        setAcviveStep,\r\n                        setBetList,\r\n                        setIsOrderSet,\r\n                        setIsBetActionOpen\r\n                    }}\r\n                />}\r\n            </div>\r\n        </SnackbarProvider>\r\n\t);\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { IconButton, Badge } from \"@material-ui/core\";\r\nimport { PlaylistAddCheck } from '@material-ui/icons';\r\nimport { IBetList } from \"./Dashboard\";\r\n\r\ninterface NavbarProps {\r\n\tclasses?: Partial<string>;\r\n\tbets: IBetList[]\r\n\tsetIsDrawerOpen: (bool: boolean) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n\tcontainer: {\r\n\t\tdisplay: \"flex\",\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"space-between\",\r\n\t\tpadding: \".5rem 1rem\",\r\n\t\theight: \"6vh\",\r\n\t\tbackground: \"#fff\"\r\n\t},\r\n\tcompanyInfoWrapper: {\r\n\t\tdisplay: \"flex\",\r\n\t\tjustifyContent: \"center\",\r\n\t\talignItems: \"center\"\r\n\t},\r\n\tlogo: {\r\n\t\twidth: \"1.8rem\",\r\n\t\tmarginRight: \".5rem\"\r\n\t}\r\n}));\r\n\r\nconst Navbar: React.FC<NavbarProps> = ({ classes: propsClasses, setIsDrawerOpen, bets }) => {\r\n\tconst classes = useStyles({ classes: propsClasses });\r\n\treturn (\r\n\t\t<div className={classes.container}>\r\n\t\t\t<div className={classes.companyInfoWrapper}>\r\n\t\t\t\t<img\r\n\t\t\t\t\tclassName={classes.logo}\r\n\t\t\t\t\tsrc=\"https://nofluffjobs.com/upload/CrustLab_20190612_164243.png\"\r\n\t\t\t\t\talt=\"crutLab\"\r\n\t\t\t\t/>\r\n\t\t\t\t<p>CrustLab</p>\r\n\t\t\t</div>\r\n\t\t\t<IconButton onClick={() => setIsDrawerOpen(true)} color=\"inherit\">\r\n              <Badge badgeContent={bets.length} color=\"secondary\">\r\n                <PlaylistAddCheck />\r\n              </Badge>\r\n            </IconButton>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Stepper, Step, StepLabel } from \"@material-ui/core\";\r\n\r\ninterface IStepperProps {\r\n\tclasses?: Partial<string>;\r\n\tactiveStep: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n\troot: {\r\n\t\twidth: \"100%\",\r\n        position: \"sticky\",\r\n        top: \".5rem\",\r\n        backdropFilter: \"blur(5px)\"\r\n\t},\r\n\tbackButton: {\r\n\t\tmarginRight: theme.spacing(1)\r\n\t},\r\n\tinstructions: {\r\n\t\tmarginTop: theme.spacing(1),\r\n\t\tmarginBottom: theme.spacing(1)\r\n\t},\r\n\tstepper: {\r\n\t\tbackground: \"none\"\r\n\t},\r\n    label: {\r\n        fontSize: \"1.2rem\",\r\n        fontWeight: \"bold\"\r\n    }\r\n}));\r\n\r\nfunction getSteps(): string[] {\r\n\treturn [\r\n        \"Select game...\",\r\n        \"Type positions...\",\r\n        \"Complete bet\"\r\n    ];\r\n}\r\n\r\nconst StepperInfo: React.FC<IStepperProps> = ({\r\n\tclasses: classesProps,\r\n\tactiveStep\r\n}) => {\r\n\tconst classes = useStyles({ classes: classesProps });\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Stepper\r\n\t\t\t\tclasses={{ root: classes.stepper }}\r\n\t\t\t\tactiveStep={activeStep}\r\n\t\t\t\talternativeLabel\r\n\t\t\t>\r\n\t\t\t\t{getSteps().map((label) => (\r\n\t\t\t\t\t<Step key={label}>\r\n\t\t\t\t\t\t<StepLabel classes={{ alternativeLabel: classes.label }}>{label}</StepLabel>\r\n\t\t\t\t\t</Step>\r\n\t\t\t\t))}\r\n\t\t\t</Stepper>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default StepperInfo;\r\n","import React from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from '@material-ui/core';\r\nimport { IBetList } from \"./Dashboard\";\r\n\r\ninterface INavbarProps {\r\n\tclasses?: Partial<string>;\r\n    setIsBetActionOpen: (number: boolean) => void\r\n    bets: IBetList[]\r\n}\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n    container : {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        position: \"absolute\",\r\n        width: \"100vw\",\r\n        height: \"100%\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        backdropFilter: \"blur(10px)\",\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            height: \"5rem\",\r\n            width: \"15rem\",\r\n            fontSize: \"1.2rem\"\r\n          },\r\n    }\r\n}));\r\n\r\nconst BetAction: React.FC<INavbarProps> = ({\r\n    classes: propsClasses,\r\n    setIsBetActionOpen,\r\n    bets\r\n}) => {\r\n    const classes = useStyles({ classes: propsClasses })\r\n    return (\r\n        <div className={classes.container}>\r\n            <Button onClick={() => setIsBetActionOpen(false)} variant=\"outlined\">\r\n                {bets.length > 0 ? \"NEXT BET\" : \"MAKE A BET\"}\r\n            </Button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BetAction;\r\n","import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { filterActiveGames } from \"./helpers/bettingHelpers\";\r\nimport { IGame } from \"../reducer/initialState\";\r\nimport { IBetList } from \"./Dashboard\";\r\nimport { Header } from \"./index\";\r\nimport { FormControlLabel, Checkbox, List, ListItem, ListItemIcon, ListItemText, Divider } from \"@material-ui/core\";\r\nimport { RadioButtonChecked } from \"@material-ui/icons\";\r\n\r\ninterface IGameSelectProps {\r\n\tclasses?: Partial<string>;\r\n    games: IGame[];\r\n    selectedGame: number | null;\r\n    setIsOrderSet: (bool: boolean) => void;\r\n    setBetList: (list: IBetList[]) => void;\r\n    setSelectedGame: (number: number | null) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    container: {\r\n        textAlign: \"left\"\r\n    },\r\n\tgamesWrapper: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    label: {\r\n        margin: \"1rem 0 1rem .2rem\"\r\n    }\r\n}));\r\n\r\nconst GameSelect: React.FC<IGameSelectProps> = ({\r\n    classes: propsClasses,\r\n    games,\r\n    selectedGame,\r\n    setBetList,\r\n    setSelectedGame,\r\n    setIsOrderSet\r\n}) => {\r\n    const [filterActive, setFilterActive] = useState<boolean>(false);\r\n\tconst classes = useStyles({ classes: propsClasses });\r\n\r\n    const handleCheckFilter = (): any => {\r\n        setFilterActive(!filterActive);\r\n    }\r\n\r\n\treturn (\r\n\t\t<div className={classes.container}>\r\n            <Header\r\n                title=\"Select race\"\r\n                subtitle={moment().format(\"LL\")}\r\n            />\r\n            <FormControlLabel\r\n            classes={{ root: classes.label }}\r\n            control={\r\n                <Checkbox checked={filterActive} onChange={handleCheckFilter} />\r\n            }\r\n            label=\"Filter active games\"\r\n            />\r\n            <Divider />\r\n            <List component=\"nav\" className={classes.root} aria-label=\"contacts\">\r\n                {(filterActive ? filterActiveGames(games) : games).map(({ id, active, name}) => (\r\n                    <ListItem\r\n                        key={id}\r\n                        button\r\n                        onClick={\r\n                            (): void => {\r\n                                setSelectedGame(selectedGame === id ? null : id);\r\n                                setIsOrderSet(false);\r\n                                setBetList([]);\r\n                            }\r\n                        }>\r\n                        <ListItemText primary={name} />\r\n                        {id === selectedGame && (\r\n                            <ListItemIcon>\r\n                                <RadioButtonChecked />\r\n                            </ListItemIcon>\r\n                        )}\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GameSelect;\r\n","import React from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardHeader  } from '@material-ui/core';\r\nimport { DirectionsCar } from '@material-ui/icons';\r\n\r\ninterface IHeader {\r\n    classes?: Partial<string>;\r\n    title: string;\r\n    subtitle: string;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: \"fex\"\r\n      },\r\n\tcontainer: {\r\n        padding: \"1.5rem\",\r\n        textAlign: \"center\",\r\n        textTransform: \"uppercase\",\r\n        fontWeight: \"bold\",\r\n        background: \"#fcfcfc\",\r\n        borderTopLeftRadius: \"4px\",\r\n        borderTopRightRadius: \"4px\"\r\n\t},\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"flex-start\"\r\n    },\r\n    avatar: {\r\n      backgroundColor: \"red\",\r\n    },\r\n}));\r\n\r\nconst Header: React.FC<IHeader> = ({\r\n    classes: propsClasses,\r\n    title,\r\n    subtitle\r\n}) => {\r\n    const classes = useStyles({ classes: propsClasses })\r\n    return (\r\n        <Card className={classes.root}>\r\n        <CardHeader\r\n        classes={{ content: classes.header }}\r\n        avatar={\r\n            <DirectionsCar fontSize=\"large\"/>\r\n        }\r\n        title={title}\r\n        subheader={subtitle}\r\n      />\r\n      </Card>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"react-beautiful-dnd\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { IGame, IParticipants } from \"../reducer/initialState\";\r\nimport { Header } from \"./index\";\r\nimport { prepareGameTitle, reorderList, preparePlaces } from \"./helpers/bettingHelpers\";\r\nimport { Button, FormControlLabel, List, ListItem, ListItemIcon, ListItemText, Divider } from \"@material-ui/core\";\r\nimport { Info, CheckCircle } from '@material-ui/icons';\r\nimport { IBetList } from \"./Dashboard\";\r\n\r\ninterface IParticipantsProps {\r\n\tclasses?: Partial<string>;\r\n    participants: IParticipants[];\r\n    setIsOrderSet: (bool: boolean) => void;\r\n    setAcviveStep: (num: number) => void;\r\n    setBetList: (list: IBetList[]) => void;\r\n    games: IGame[];\r\n    selectedGame: number;\r\n    isOrderSet: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper\r\n    },\r\n\tcontainer: {\r\n        textAlign: \"left\",\r\n        position: \"relative\",\r\n        height: \"100%\"\r\n\t},\r\n    icon: {\r\n        width: \"1.5rem\",\r\n        height: \"1.5rem\",\r\n        padding: \".5rem\"\r\n    },\r\n    infoWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        padding: \"1rem 1rem\"\r\n    },\r\n    button: {\r\n        minWidth: \"10rem\"\r\n    },\r\n    orderSet: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        zIndex: 2,\r\n        backdropFilter: \"blur(10px)\",\r\n        borderRadius: \"10px\"\r\n    },\r\n    checkIcon: {\r\n        fontSize: \"10rem !important\",\r\n        color: \"green\"\r\n    }\r\n}));\r\n\r\nconst ParticipantsTyping: React.FC<IParticipantsProps> = ({\r\n\tclasses: propsClasses,\r\n    isOrderSet,\r\n    participants,\r\n    setIsOrderSet,\r\n    setAcviveStep,\r\n    setBetList,\r\n    games,\r\n    selectedGame\r\n}) => {\r\n\tconst classes = useStyles({ classes: propsClasses });\r\n\r\n    React.useEffect((): void => {\r\n        setBetList(preparePlaces(participants, prepareGameTitle(games, selectedGame)));\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onEnd = (result: DropResult): any => {\r\n        const orderedList = reorderList(participants, result.source.index, result.destination?.index);\r\n        setBetList(preparePlaces(orderedList, prepareGameTitle(games, selectedGame)));\r\n        return;\r\n    }\r\n\r\n    const handleBetSubmit = () => {\r\n        setIsOrderSet(true);\r\n        setAcviveStep(2);\r\n    }\r\n\r\n\treturn (\r\n\t\t<div className={classes.container}>\r\n            <Header\r\n                title=\"Select places...\"\r\n                subtitle={prepareGameTitle(games, selectedGame)}\r\n            />\r\n            <div className={classes.infoWrapper}>\r\n                <FormControlLabel\r\n                    control={<Info classes={{ root: classes.icon }}/>}\r\n                    label=\"Drag and drop for selecting places and then\"\r\n                />\r\n                <Button onClick={handleBetSubmit} classes={{ root: classes.button }} variant=\"outlined\">BET</Button>\r\n            </div>\r\n            <Divider />\r\n            <DragDropContext onDragEnd={onEnd}>\r\n                <Droppable droppableId=\"123\">\r\n                    {(provided, snapShot) => (\r\n                        <List\r\n                            component=\"nav\"\r\n                            className={classes.root}\r\n                            aria-label=\"contacts\"\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {participants.map(({ body, id }, index) => (\r\n                                <Draggable\r\n                                    draggableId={`${id}`}\r\n                                    key={id}\r\n                                    index={index}\r\n                                >\r\n                                    {(provided, snapShot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                        >\r\n                                            <div>\r\n                                                <ListItem button key={id}>\r\n                                                    <ListItemText primary={body} />\r\n                                                    {index === 0 && (\r\n                                                        <ListItemIcon>\r\n                                                            {\"1 place\"}\r\n                                                        </ListItemIcon>\r\n                                                    )}\r\n                                                    {index === 1 && (\r\n                                                        <ListItemIcon>\r\n                                                            {\"2 place\"}\r\n                                                        </ListItemIcon>\r\n                                                    )}\r\n                                                    {index === 2 && (\r\n                                                        <ListItemIcon>\r\n                                                            {\"3 place\"}\r\n                                                        </ListItemIcon>\r\n                                                    )}\r\n                                                </ListItem>\r\n                                                {index === 2 && <Divider />}\r\n                                            </div>\r\n                                        </div>\r\n                                        )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </List>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            {isOrderSet && (\r\n                <div className={classes.orderSet}>\r\n                    <CheckCircle classes={{ root: classes.checkIcon }}/>\r\n                </div>\r\n            )}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ParticipantsTyping;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AttachMoney, ArrowBackIos } from '@material-ui/icons';\r\nimport { Header } from \"./index\";\r\nimport { Button, FormControlLabel, Divider, Typography, CardContent } from \"@material-ui/core\";\r\nimport { IBetList } from \"./Dashboard\";\r\n\r\ninterface ICompleteBetProps {\r\n\tclasses?: Partial<string>;\r\n    betList: IBetList[];\r\n    setAcviveStep: (num: number) => void;\r\n    setIsOrderSet: (bool: boolean) => void;\r\n    setIsConfirmationOpen: (bool: boolean) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n\tcontainer: {\r\n        textAlign: \"left\"\r\n\t},\r\n    icon: {\r\n        width: \"1.5rem\",\r\n        height: \"1.5rem\",\r\n        padding: \".5rem\"\r\n    },\r\n    infoWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        padding: \"1rem 1rem\"\r\n    },\r\n    button: {\r\n        minWidth: \"10rem\"\r\n    },\r\n    backButton: {\r\n        width: \"6rem\",\r\n        height: \"6rem\",\r\n        borderRadius: \"4px\",\r\n        margin: \".2rem\"\r\n    },\r\n    betInfo: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    }\r\n}));\r\n\r\nconst CompleteBet: React.FC<ICompleteBetProps> = ({\r\n    classes: propsClasses,\r\n    setIsOrderSet,\r\n    setAcviveStep,\r\n    setIsConfirmationOpen,\r\n    betList\r\n}) => {\r\n\tconst classes = useStyles({ classes: propsClasses });\r\n\r\n\treturn (\r\n\t\t<div className={classes.container}>\r\n            <Header\r\n                title=\"Confirm Cupon\"\r\n                subtitle={moment().format(\"LL\")}\r\n            />\r\n            <div className={classes.infoWrapper}>\r\n                <FormControlLabel\r\n                    control={<AttachMoney classes={{ root: classes.icon }}/>}\r\n                    label=\"Check cupon details and pay\"\r\n                />\r\n                <Button onClick={() => setIsConfirmationOpen(true)} classes={{ root: classes.button }} variant=\"outlined\">PAY</Button>\r\n            </div>\r\n            <Divider />\r\n            {betList.map(({ raceName, first, second, third }, index) => (\r\n                <div className={classes.betInfo} key={index}>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h4\" component=\"h2\">\r\n                            GAME\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                            {raceName}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            First Place\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                            {first}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Second Place\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                            {second}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Third Place\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                            {third}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                    <Divider />\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            Total Price: $48\r\n                        </Typography>\r\n                    </CardContent>\r\n                </div>\r\n            ))}\r\n            <Button onClick={() => {setIsOrderSet(false); setAcviveStep(1)}} classes={{ root: classes.backButton }} variant=\"text\" ><ArrowBackIos /></Button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CompleteBet;\r\n","import React, { Dispatch } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { IBetList } from './Dashboard';\r\nimport { AppActions } from '../reducer/reducer';\r\nimport { useSnackbar } from \"notistack\";\r\n\r\ninterface IConfirmationPopoverProps {\r\n    setSelectedGame: (number: number | null) => void;\r\n    setAcviveStep: (num: number) => void;\r\n    setBetList: (list: IBetList[]) => void;\r\n    setIsOrderSet: (bool: boolean) => void;\r\n    setIsBetActionOpen: (bool: boolean) => void;\r\n    setIsOpen: (bool: boolean) => void;\r\n    open: boolean;\r\n    dispatch: Dispatch<AppActions>;\r\n    betList: IBetList[];\r\n}\r\n\r\nconst ConfirmationPopover: React.FC<IConfirmationPopoverProps> = ({\r\n    open,\r\n    dispatch,\r\n    betList,\r\n    setSelectedGame,\r\n    setAcviveStep,\r\n    setBetList,\r\n    setIsOrderSet,\r\n    setIsBetActionOpen,\r\n    setIsOpen\r\n}) => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const handleClickVariant = () => {\r\n        enqueueSnackbar(\"This is a success message!\", { variant: \"success\" });\r\n    };\r\n    const handleClose = (): void => {\r\n        setIsOpen(false)\r\n    }\r\n\r\n    const handleSubmit = (): void => {\r\n        dispatch({ type: \"add-bet-to-list\", payload: betList })\r\n        setSelectedGame(null);\r\n        setAcviveStep(0);\r\n        setBetList([]);\r\n        setIsOrderSet(false);\r\n        setIsBetActionOpen(true);\r\n        setIsOpen(false);\r\n        handleClickVariant();\r\n    }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Are You sure You want to buy this ticked ?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Click Buy to proceed...\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            CANCEL\r\n          </Button>\r\n          <Button onClick={handleSubmit} color=\"primary\" autoFocus>\r\n            BUY\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfirmationPopover;\r\n","import React, { Dispatch } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Paper, Typography } from \"@material-ui/core\";\r\nimport { IBetList } from \"./Dashboard\";\r\nimport { AppActions } from \"../reducer/reducer\";\r\n\r\ninterface IBetsList {\r\n\tclasses?: Partial<string>;\r\n\tbets: IBetList[]\r\n    dispatch: Dispatch<AppActions>\r\n}\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n    root: {\r\n        display: \"flex\",\r\n\t\tflexWrap: \"wrap\",\r\n        justifyContent: \"center\",\r\n\t\t\"& > *\": {\r\n\t\t\tmargin: \"1rem 2rem\",\r\n\t\t\twidth: theme.spacing(60),\r\n\t\t\theight: theme.spacing(25),\r\n            borderRadius: \"10px\"\r\n\t\t}\r\n    },\r\n    paper: {\r\n        padding: \"1rem\",\r\n    },\r\n    wrapper: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    button: {\r\n        minWidth: \"10rem\",\r\n        marginLeft: \"2rem\"\r\n    }\r\n}));\r\n\r\nconst BetsList: React.FC<IBetsList> = ({\r\n    classes: propsClasses,\r\n    dispatch,\r\n    bets\r\n}) => {\r\n\tconst classes = useStyles({ classes: propsClasses });\r\n\r\n    const handleClear = (): void => {\r\n        dispatch({ type: \"clear-bets\" })\r\n    } \r\n\r\n    return (\r\n        <div>\r\n            {bets.map(({ raceName, first, second, third }, index) => (\r\n                <div className={classes.root} key={index}>\r\n                    <Paper classes={{ root: classes.paper }} elevation={4} >\r\n                        <div className={classes.wrapper}>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                CUPON:\r\n                            </Typography>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"span\">\r\n                                {`RACE: ${raceName}`}\r\n                            </Typography>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"span\">\r\n                                {`First place: ${first}`}\r\n                            </Typography>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"span\">\r\n                                {`Second place: ${second}`}\r\n                            </Typography>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"span\">\r\n                                {`Third place: ${third}`}\r\n                            </Typography>\r\n                        </div>\r\n                    </Paper>\r\n                </div>\r\n            ))}\r\n            <Button onClick={handleClear} classes={{ root: classes.button }} variant=\"outlined\">CLEAR</Button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BetsList;","import { initialState } from \"./initialState\";\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\nexport type AppActions = \r\n| {\ttype: \"set-games-data\" | \"set-participants-data\" | \"add-bet-to-list\"; payload: any }\r\n| { type: \"clear-bets\" };\r\n\r\nconst reducer = (state: initialStateType, action: AppActions) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"set-games-data\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgames: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase \"set-participants-data\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tparticipants: action.payload\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase \"add-bet-to-list\": {\r\n\t\t\tconst { payload } = action;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tbets: [\r\n\t\t\t\t\t...state.bets,\r\n\t\t\t\t\t...payload\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase \"clear-bets\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tbets: []\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default reducer;\r\n","import React, { useState, useReducer } from \"react\";\nimport { initialState } from \"./reducer/initialState\";\nimport { Navbar, Dashboard, BetsList } from \"./components\";\nimport { SwipeableDrawer } from \"@material-ui/core\";\nimport reducer from \"./reducer/reducer\";\nimport \"./App.css\"\n\nexport default function App() {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n    const [isDrawerOpen, setIsDrawerOpen] = useState<boolean>(false)\n\tconst { bets } = state;\n\tconsole.log({ state });\n\n\tReact.useEffect(() => {\n\t\tconst gamesApiCall = () => {\n\t\t\tfetch(\"https://my-json-server.typicode.com/hdjfye/bet-api/races\")\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then((data) =>\n\t\t\t\t\tdispatch({ type: \"set-games-data\", payload: data })\n\t\t\t\t)\n\t\t\t\t.catch((error) => console.log(error.message));\n\t\t};\n\t\tconst participantsApiCall = () => {\n\t\t\tfetch(\n\t\t\t\t\"https://my-json-server.typicode.com/hdjfye/bet-api/participants\"\n\t\t\t)\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then((data) =>\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: \"set-participants-data\",\n\t\t\t\t\t\tpayload: data\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.catch((error) => console.log(error.message));\n\t\t};\n\n\t\tgamesApiCall();\n\t\tparticipantsApiCall();\n\t}, []);\n\n\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Navbar {...{\n\t\t\t\t\tsetIsDrawerOpen,\n\t\t\t\t\tbets\n\t\t\t\t}}/>\n\t\t\t\t<Dashboard\n\t\t\t\t\t{...{\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\t...state\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<SwipeableDrawer\n\t\t\t\t\tanchor={\"right\"}\n\t\t\t\t\topen={isDrawerOpen}\n\t\t\t\t\tonClose={() => setIsDrawerOpen(false)}\n\t\t\t\t\tonOpen={() => setIsDrawerOpen(true)}\n\t\t\t\t>\n\t\t\t\t\t{bets.length > 0 && <BetsList {...{ dispatch, bets }} />}\n            \t</SwipeableDrawer>\n\t\t\t</div>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}